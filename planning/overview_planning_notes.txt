Pull in data from multiple sources to determine which games are DRM-free and which ones are not

- have an application that people can use to search metadata about a game to see if it's possible to get it on a DRM-free format or not.


DRM definition:
    - requires any kind of 3rd party launcher to run
    - on Steam: requires Steam's launcher to run
    - online: cannot be played offline (including check-ins)

DRM free:
    - game can be purchased one time, backed up,
    and used on multiple computers


Why: I reject the idea that "buying" a game means "purchasing a license",
which in essence means my purchase can be revoked at any time by the company I bought it from.
I don't like this idea, and I want to educate myself and others on games that do not
promote this policy, and show people where to get them.

I also want to find the statistics of which games are truly DRM-free, and which ones are not.

This will be for PC digital games, as there is not really an option for digital-games without DRM on consoles. 
The best option there is to buy a physical copy.

I want to do this to help myself and my friends with this.


Explain why this matters:
    - If Steam went out of business for any reason, all of the games that you purchased would be lost if you needed to re-download them.


- write automated tests
- write good logging/error messages


- web scraping: https://www.pcgamingwiki.com/wiki/The_big_list_of_DRM-free_games_on_Steam
- 


- show what playable on: Windows (and version), MacOS (and version), Linux

- Epic Games Store
- Xbox PC Game Pass
- Steam
- GOG.com
- Itch.io
- ZOOM Platform

DRM types:
    https://www.pcgamingwiki.com/wiki/Digital_rights_management_(DRM)#DRM-free

    - Disc Check
    - CD Key
    - Online Activation
    - Activation Limit
    - Account Based
    - Always Online
    - Physical (makes sense)
    - USB Dongle (makes sense)


    - Middleware
        - ActControl
        - Arxan Anti-Tamper
        - Battle.net
        - CopyLok
        - Denuvo Anti-Tamper
        - Epic Online Services
        - Games for Windows - LIVE (retired)
        - LaserLock
        - Microsoft Store
        - Origin

        - ProtectDISC Software
        - Ring PROTECH
        - SafeDisc

-------------------------------------------------------------------------------------------------------

sources:
    - company's website
    - 



Example:
    - type in video game name
        - query should be LIKE, not necessarily exact

            - Timesplitters
                - only mention official store fronts


Itch.io: no DRM
    - check the download link just in case this changes
    - offer as an alternative if the game is available there

GOG.com: no DRM
    - check the download link just in case this changes
    - offer as an alternative if the game is available there


Check to see if game has specific DRM
    - Denuvo


https://www.howtogeek.com/813209/psa-not-all-steam-games-have-drm-heres-how-to-tell/

Will help: Check to see if game exists on Steam without DRM
    - inform people that this game is not owned by you. You're free to pay for it, but it can be removed by the company per the license agreement
        - show the license agreement




------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

requirements basics:

"I want to design a Data Engineering application that takes data from multiple sources for PC video games: Steam, GOG.com, and Itch.io.
I want to get a list of games, and their metadata, and place that data into database tables after ingesting them via web APIs, among other sources.
The goal is to create an efficient data pipeline, using an efficient data model, that is orchestrated to run daily. This will power a data visualization that the user can query games by genre, name, etc. 
The ultimate goal is to show which games on Steam are DRM-free, and can be found on other platforms without using DRM of any kind (such as on GOG.com or Itch.io)."

1. Data Sources:

    Steam API: Fetch game data including title, genres, release date, DRM information, etc.
    GOG.com API: Retrieve game data such as title, genres, DRM-free information, etc.
    Itch.io API: Obtain game data including title, genres, DRM-free information, etc.
    Web scraping: Supplement API data with additional sources if necessary.

2. Data Ingestion:

    Implement ingestion mechanisms to fetch data from APIs and other sources.
    Utilize scheduled jobs to run ingestion processes daily.
    Ensure fault tolerance and error handling in case of API failures or data inconsistencies.

3. Data Model:

    Design an efficient database schema to store game data.
    Consider tables for games, genres, DRM information, etc.
    Optimize the schema for query performance and scalability.

4. ETL (Extract, Transform, Load):

    Develop ETL processes to transform raw data into a structured format.
    Cleanse and standardize data across different sources.
    Enrich data with additional attributes or derived features as needed.

5. Data Pipeline Orchestration:

    Use orchestration tools like Apache Airflow or Kubernetes to manage the data pipeline.
    Define workflows to coordinate data ingestion, transformation, and loading tasks.
    Monitor pipeline health and performance metrics.

6. Data Visualization:

    Develop a user interface for querying game data.
    Implement search and filtering functionalities based on genre, name, DRM status, etc.
    Utilize visualization libraries like Plotly or D3.js to create interactive visualizations.

7. DRM Analysis:

    Implement logic to identify DRM-free games by comparing data from different sources.
    Aggregate and analyze DRM information to determine games available on multiple platforms without DRM.
    Present findings through the data visualization interface.

8. Testing and Optimization:

    Conduct thorough testing of the data pipeline and visualization components.
    Optimize code and queries for performance and efficiency.
    Incorporate feedback from users to improve usability and functionality.

9. Documentation:

    Document the architecture, data model, and workflows for future reference.
    Provide clear instructions for setting up and maintaining the application.

10. Deployment:

    Deploy the application to a production environment.
    Ensure scalability and reliability of the deployment infrastructure.
    Implement monitoring and logging to track system behavior and performance.

By following this plan, you'll be able to systematically develop your Data Engineering application for analyzing PC video game data from multiple sources and providing valuable insights to users.